-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Haskell bindings to MLIR
@package mlir-hs
@version 0.1.0.0

module MLIR.AST.IStorableArray
data IStorableArray i e
unsafeWithIStorableArray :: IStorableArray i e -> (Ptr e -> IO c) -> IO c
instance Foreign.Storable.Storable e => Data.Array.Base.IArray MLIR.AST.IStorableArray.IStorableArray e
instance (GHC.Ix.Ix i, GHC.Show.Show i, GHC.Show.Show e, Foreign.Storable.Storable e) => GHC.Show.Show (MLIR.AST.IStorableArray.IStorableArray i e)
instance (GHC.Ix.Ix i, GHC.Classes.Eq e, Foreign.Storable.Storable e) => GHC.Classes.Eq (MLIR.AST.IStorableArray.IStorableArray i e)


-- | This module defines a set of Haskell types wrapping references to
--   native C++ MLIR objects along with some basic operations on them. See
--   the submodules for more specialized components such as an
--   <a>ExecutionEngine</a> or <a>PassManager</a>.
module MLIR.Native

-- | A native MLIR context.
data Context

-- | Creates a native MLIR context.
createContext :: IO Context

-- | Destroys a native MLIR context.
destroyContext :: Context -> IO ()

-- | Wraps an IO action that gets access to a fresh MLIR context.
withContext :: (Context -> IO a) -> IO a

-- | A typeclass for retrieving MLIR contexts managing other native types.
class HasContext a

-- | Retrieve the MLIR context that manages the storage of the native
--   value.
getContext :: HasContext a => a -> IO Context

-- | Register all builtin MLIR dialects in the specified <a>Context</a>.
registerAllDialects :: Context -> IO ()

-- | Retrieve the count of dialects currently registered in the
--   <a>Context</a>.
getNumLoadedDialects :: Context -> IO Int

-- | A native MLIR type object.
data Type

-- | A native MLIR location object.
data Location
getFileLineColLocation :: Context -> StringRef -> CUInt -> CUInt -> IO Location
getNameLocation :: Context -> StringRef -> Location -> IO Location

-- | Create an unknown source location.
getUnknownLocation :: Context -> IO Location

-- | A native MLIR operation instance.
data Operation

-- | Retrieve the name of the given operation.
getOperationName :: Operation -> IO Identifier

-- | Show the operation using the MLIR printer.
showOperation :: Operation -> IO ByteString

-- | Show the operation with location using the MLIR printer.
showOperationWithLocation :: Operation -> IO ByteString

-- | Check validity of the operation.
verifyOperation :: Operation -> IO Bool

-- | A native MLIR region.
data Region

-- | Returns the regions of an Operation.
getOperationRegions :: Operation -> IO [Region]

-- | Returns the Blocks in a Region.
getRegionBlocks :: Region -> IO [Block]

-- | A native MLIR block object. Every block is a list of
--   <a>Operation</a>s.
data Block

-- | Show the block using the MLIR printer.
showBlock :: Block -> IO ByteString

-- | Returns the Operations in a Block.
getBlockOperations :: Block -> IO [Operation]

-- | A native MLIR module operation. Since every module is an operation, it
--   can be converted to an <a>Operation</a> using
--   <a>moduleAsOperation</a>.
data Module

-- | Create an empty module.
createEmptyModule :: Location -> IO Module

-- | Parse a module from a string. Returns <a>Nothing</a> in case of parse
--   failure.
parseModule :: Context -> StringRef -> IO (Maybe Module)

-- | Destroy all resources associated with a <a>Module</a>.
destroyModule :: Module -> IO ()

-- | Retrieve the block containg all module definitions.
getModuleBody :: Module -> IO Block

-- | Convert a module to an <a>Operation</a>.
moduleAsOperation :: Module -> IO Operation

-- | Inverse of <a>moduleAsOperation</a>. Returns <a>Nothing</a> if the
--   operation is not a builtin MLIR module operation.
moduleFromOperation :: Operation -> IO (Maybe Module)

-- | Show the module using the MLIR printer.
showModule :: Module -> IO ByteString
data StringRef
StringRef :: Ptr CChar -> CSize -> StringRef

-- | Use a <a>ByteString</a> as a <a>StringRef</a>. This is O(n) due to
--   MLIR sometimes requiring the <a>StringRef</a>s to be null-terminated.
withStringRef :: ByteString -> (StringRef -> IO a) -> IO a

-- | A native MLIR identifier. Identifiers are strings interned in the MLIR
--   context.
data Identifier

-- | Create an identifier from a <a>StringRef</a>.
createIdentifier :: Context -> StringRef -> IO Identifier

-- | View an identifier as a <a>StringRef</a>. The result is valid for as
--   long as the <a>Context</a> managing the identifier.
identifierString :: Identifier -> IO StringRef

-- | A result code for many failable MLIR operations. The only valid cases
--   are <a>Success</a> and <a>Failure</a>.
data LogicalResult

-- | Indicates a filure of an MLIR operation. Inspect the diagnostics
--   output to find the cause of the issue.
pattern Failure :: LogicalResult

-- | Indicates a successful completion of an MLIR operation.
pattern Success :: LogicalResult

-- | Enable or disable debug logging in MLIR.
setDebugMode :: Bool -> IO ()

-- | A class for native objects that can be dumped to standard error
--   output.
class HasDump a

-- | Display the value in the standard error output.
dump :: HasDump a => a -> IO ()
instance MLIR.Native.HasDump MLIR.Native.FFI.Operation
instance MLIR.Native.HasDump MLIR.Native.FFI.Module
instance MLIR.Native.HasContext MLIR.Native.FFI.Module

module MLIR.Native.ExecutionEngine
createExecutionEngine :: Module -> IO (Maybe ExecutionEngine)
inline_c_ffi_6989586621679067845 :: Module -> IO ExecutionEngine
destroyExecutionEngine :: ExecutionEngine -> IO ()
inline_c_ffi_6989586621679067854 :: ExecutionEngine -> IO ()
withExecutionEngine :: Module -> (Maybe ExecutionEngine -> IO a) -> IO a
data SomeStorable
SomeStorable :: a -> SomeStorable
executionEngineInvoke :: forall result. Storable result => ExecutionEngine -> StringRef -> [SomeStorable] -> IO (Maybe result)
inline_c_ffi_6989586621679067890 :: ExecutionEngine -> Ptr CChar -> CSize -> Ptr (Ptr ()) -> IO LogicalResult
packStruct64 :: [SomeStorable] -> (Ptr () -> IO a) -> IO a

module MLIR.AST.Serialize
type ValueMapping = Map Name Value
type BlockMapping = Map Name Block
type ValueAndBlockMapping = (ValueMapping, BlockMapping)
class FromAST ast native | ast -> native
fromAST :: FromAST ast native => Context -> ValueAndBlockMapping -> ast -> IO native
packFromAST :: (FromAST ast native, Storable native) => Context -> ValueAndBlockMapping -> [ast] -> ContT r IO (CIntPtr, Ptr native)
packArray :: Storable a => [a] -> ContT r IO (CIntPtr, Ptr a)
unpackArray :: Storable a => CIntPtr -> Ptr a -> IO [a]

module MLIR.AST.Dialect.Affine
data Expr
Dimension :: Int -> Expr
Symbol :: Int -> Expr
Constant :: Int -> Expr
Add :: Expr -> Expr -> Expr
Mul :: Expr -> Expr -> Expr
Mod :: Expr -> Expr -> Expr
FloorDiv :: Expr -> Expr -> Expr
CeilDiv :: Expr -> Expr -> Expr
data Map
Map :: Int -> Int -> [Expr] -> Map
[mapDimensionCount] :: Map -> Int
[mapSymbolCount] :: Map -> Int
[mapExprs] :: Map -> [Expr]
inline_c_ffi_6989586621679073547 :: Context -> CIntPtr -> IO AffineExpr
inline_c_ffi_6989586621679073559 :: Context -> CIntPtr -> IO AffineExpr
inline_c_ffi_6989586621679073571 :: Context -> Int64 -> IO AffineExpr
inline_c_ffi_6989586621679073585 :: AffineExpr -> AffineExpr -> IO AffineExpr
inline_c_ffi_6989586621679073599 :: AffineExpr -> AffineExpr -> IO AffineExpr
inline_c_ffi_6989586621679073613 :: AffineExpr -> AffineExpr -> IO AffineExpr
inline_c_ffi_6989586621679073627 :: AffineExpr -> AffineExpr -> IO AffineExpr
inline_c_ffi_6989586621679073641 :: AffineExpr -> AffineExpr -> IO AffineExpr
inline_c_ffi_6989586621679073532 :: Context -> CIntPtr -> CIntPtr -> CIntPtr -> Ptr AffineExpr -> IO AffineMap
instance GHC.Classes.Eq MLIR.AST.Dialect.Affine.Expr
instance GHC.Classes.Eq MLIR.AST.Dialect.Affine.Map
instance MLIR.AST.Serialize.FromAST MLIR.AST.Dialect.Affine.Map MLIR.Native.FFI.AffineMap
instance MLIR.AST.Serialize.FromAST MLIR.AST.Dialect.Affine.Expr MLIR.Native.FFI.AffineExpr

module MLIR.AST
type Name = ByteString
type UInt = Word
data Signedness
Signed :: Signedness
Unsigned :: Signedness
Signless :: Signedness
data Type
BFloat16Type :: Type
Float16Type :: Type
Float32Type :: Type
Float64Type :: Type
Float80Type :: Type
Float128Type :: Type
ComplexType :: Type -> Type
IndexType :: Type
IntegerType :: Signedness -> UInt -> Type
TupleType :: [Type] -> Type
NoneType :: Type
FunctionType :: [Type] -> [Type] -> Type
MemRefType :: [Maybe Int] -> Type -> Maybe Attribute -> Maybe Attribute -> Type
[memrefTypeShape] :: Type -> [Maybe Int]
[memrefTypeElement] :: Type -> Type
[memrefTypeLayout] :: Type -> Maybe Attribute
[memrefTypeMemorySpace] :: Type -> Maybe Attribute
RankedTensorType :: [Maybe Int] -> Type -> Maybe Attribute -> Type
[rankedTensorTypeShape] :: Type -> [Maybe Int]
[rankedTensorTypeElement] :: Type -> Type
[rankedTensorTypeEncoding] :: Type -> Maybe Attribute
VectorType :: [Int] -> Type -> Type
[vectorTypeShape] :: Type -> [Int]
[vectorTypeElement] :: Type -> Type
UnrankedMemRefType :: Type -> Attribute -> Type
[unrankedMemrefTypeElement] :: Type -> Type
[unrankedMemrefTypeMemorySpace] :: Type -> Attribute
UnrankedTensorType :: Type -> Type
[unrankedTensorTypeElement] :: Type -> Type
OpaqueType :: Name -> ByteString -> Type
[opaqueTypeNamespace] :: Type -> Name
[opaqueTypeData] :: Type -> ByteString
DialectType :: t -> Type
data Location
UnknownLocation :: Location
FileLocation :: ByteString -> UInt -> UInt -> Location
[locPath] :: Location -> ByteString
[locLine] :: Location -> UInt
[locColumn] :: Location -> UInt
NameLocation :: ByteString -> Location -> Location
[locName] :: Location -> ByteString
[locChild] :: Location -> Location
FusedLocation :: [Location] -> Maybe Attribute -> Location
[locLocations] :: Location -> [Location]
[locMetadata] :: Location -> Maybe Attribute
CallSiteLocation :: Location
OpaqueLocation :: Location
data Binding
Bind :: [Name] -> Operation -> Binding
pattern Do :: Operation -> Binding
pattern (:=) :: Name -> Operation -> Binding
pattern (::=) :: [Name] -> Operation -> Binding
data Block
Block :: Name -> [(Name, Type)] -> [Binding] -> Block
[blockName] :: Block -> Name
[blockArgs] :: Block -> [(Name, Type)]
[blockBody] :: Block -> [Binding]
data Region
Region :: [Block] -> Region
data Attribute
ArrayAttr :: [Attribute] -> Attribute
DictionaryAttr :: Map Name Attribute -> Attribute
FloatAttr :: Type -> Double -> Attribute
IntegerAttr :: Type -> Int -> Attribute
BoolAttr :: Bool -> Attribute
StringAttr :: ByteString -> Attribute
TypeAttr :: Type -> Attribute
AffineMapAttr :: Map -> Attribute
UnitAttr :: Attribute
DenseArrayAttr :: DenseElements -> Attribute
DenseElementsAttr :: Type -> DenseElements -> Attribute
AsmTextAttr :: ByteString -> Attribute
data DenseElements
DenseUInt8 :: IStorableArray i Word8 -> DenseElements
DenseInt8 :: IStorableArray i Int8 -> DenseElements
DenseUInt32 :: IStorableArray i Word32 -> DenseElements
DenseInt32 :: IStorableArray i Int32 -> DenseElements
DenseUInt64 :: IStorableArray i Word64 -> DenseElements
DenseInt64 :: IStorableArray i Int64 -> DenseElements
DenseFloat :: IStorableArray i Float -> DenseElements
DenseDouble :: IStorableArray i Double -> DenseElements
data ResultTypes
Explicit :: [Type] -> ResultTypes
Inferred :: ResultTypes
type NamedAttributes = Map Name Attribute
data AbstractOperation operand
Operation :: Name -> Location -> ResultTypes -> [operand] -> [Region] -> [Name] -> Map Name Attribute -> AbstractOperation operand
[opName] :: AbstractOperation operand -> Name
[opLocation] :: AbstractOperation operand -> Location
[opResultTypes] :: AbstractOperation operand -> ResultTypes
[opOperands] :: AbstractOperation operand -> [operand]
[opRegions] :: AbstractOperation operand -> [Region]
[opSuccessors] :: AbstractOperation operand -> [Name]
[opAttributes] :: AbstractOperation operand -> Map Name Attribute
type Operation = AbstractOperation Name
pattern NoAttrs :: Map Name Attribute
namedAttribute :: Name -> Attribute -> NamedAttributes
pattern ModuleOp :: Block -> Operation
pattern FuncAttrs :: Name -> Type -> Map Name Attribute
pattern FuncOp :: Location -> Name -> Type -> Region -> Operation
inline_c_ffi_6989586621679084122 :: IO Attribute
inline_c_ffi_6989586621679084140 :: Context -> CIntPtr -> Ptr Location -> Attribute -> IO Location
inline_c_ffi_6989586621679083874 :: Context -> IO Type
inline_c_ffi_6989586621679083882 :: Context -> IO Type
inline_c_ffi_6989586621679083890 :: Context -> IO Type
inline_c_ffi_6989586621679083898 :: Context -> IO Type
inline_c_ffi_6989586621679083908 :: Type -> IO Type
inline_c_ffi_6989586621679083930 :: Context -> CIntPtr -> Ptr Type -> CIntPtr -> Ptr Type -> IO Type
inline_c_ffi_6989586621679083938 :: Context -> IO Type
inline_c_ffi_6989586621679083951 :: Context -> CUInt -> IO Type
inline_c_ffi_6989586621679083961 :: Context -> CUInt -> IO Type
inline_c_ffi_6989586621679083971 :: Context -> CUInt -> IO Type
inline_c_ffi_6989586621679084016 :: Type -> CIntPtr -> Ptr Int64 -> Attribute -> Attribute -> IO Type
inline_c_ffi_6989586621679084024 :: Context -> IO Type
inline_c_ffi_6989586621679084047 :: CIntPtr -> Ptr Int64 -> Type -> Attribute -> IO Type
inline_c_ffi_6989586621679084062 :: Context -> CIntPtr -> Ptr Type -> IO Type
inline_c_ffi_6989586621679084076 :: Type -> Attribute -> IO Type
inline_c_ffi_6989586621679084086 :: Type -> IO Type
inline_c_ffi_6989586621679084104 :: CIntPtr -> Ptr Int64 -> Type -> IO Type
inline_c_ffi_6989586621679083861 :: IO Region
inline_c_ffi_6989586621679083835 :: Region -> Block -> IO ()
inline_c_ffi_6989586621679083855 :: CIntPtr -> Ptr Type -> Ptr Location -> IO Block
inline_c_ffi_6989586621679083764 :: Block -> Operation -> IO ()
inline_c_ffi_6989586621679083774 :: Block -> IO CIntPtr
inline_c_ffi_6989586621679083788 :: CIntPtr -> Ptr Value -> Block -> IO ()
inline_c_ffi_6989586621679083797 :: Operation -> IO CIntPtr
inline_c_ffi_6989586621679083811 :: CIntPtr -> Ptr Value -> Operation -> IO ()
inline_c_ffi_6989586621679083422 :: Context -> CIntPtr -> Ptr Attribute -> IO Attribute
inline_c_ffi_6989586621679083437 :: Context -> CIntPtr -> Ptr NamedAttribute -> IO Attribute
inline_c_ffi_6989586621679083453 :: Context -> Type -> CDouble -> IO Attribute
inline_c_ffi_6989586621679083467 :: Type -> Int64 -> IO Attribute
inline_c_ffi_6989586621679083479 :: Context -> CInt -> IO Attribute
inline_c_ffi_6989586621679083494 :: Context -> Ptr CChar -> CSize -> IO Attribute
inline_c_ffi_6989586621679083509 :: Context -> Ptr CChar -> CSize -> IO Attribute
inline_c_ffi_6989586621679083519 :: Type -> IO Attribute
inline_c_ffi_6989586621679083529 :: AffineMap -> IO Attribute
inline_c_ffi_6989586621679083537 :: Context -> IO Attribute
inline_c_ffi_6989586621679083553 :: Context -> CIntPtr -> Ptr Int8 -> IO Attribute
inline_c_ffi_6989586621679083568 :: Context -> CIntPtr -> Ptr Int32 -> IO Attribute
inline_c_ffi_6989586621679083583 :: Context -> CIntPtr -> Ptr Int64 -> IO Attribute
inline_c_ffi_6989586621679083599 :: Context -> CIntPtr -> Ptr CFloat -> IO Attribute
inline_c_ffi_6989586621679083615 :: Context -> CIntPtr -> Ptr CDouble -> IO Attribute
inline_c_ffi_6989586621679083633 :: Type -> CIntPtr -> Ptr Word8 -> IO Attribute
inline_c_ffi_6989586621679083648 :: Type -> CIntPtr -> Ptr Int8 -> IO Attribute
inline_c_ffi_6989586621679083663 :: Type -> CIntPtr -> Ptr Word32 -> IO Attribute
inline_c_ffi_6989586621679083678 :: Type -> CIntPtr -> Ptr Int32 -> IO Attribute
inline_c_ffi_6989586621679083693 :: Type -> CIntPtr -> Ptr Word64 -> IO Attribute
inline_c_ffi_6989586621679083708 :: Type -> CIntPtr -> Ptr Int64 -> IO Attribute
inline_c_ffi_6989586621679083724 :: Type -> CIntPtr -> Ptr CFloat -> IO Attribute
inline_c_ffi_6989586621679083740 :: Type -> CIntPtr -> Ptr CDouble -> IO Attribute
inline_c_ffi_6989586621679083402 :: Ptr CChar -> CSize -> Location -> CBool -> CIntPtr -> Ptr Type -> CIntPtr -> Ptr Value -> CIntPtr -> Ptr Region -> CIntPtr -> Ptr Block -> CIntPtr -> Ptr NamedAttribute -> IO Operation
packNamedAttrs :: Context -> ValueAndBlockMapping -> Map Name Attribute -> ContT r IO (CIntPtr, Ptr NamedAttribute)
inline_c_ffi_6989586621679084156 :: IO CSize
inline_c_ffi_6989586621679084163 :: IO CSize
inline_c_ffi_6989586621679084185 :: Ptr NamedAttribute -> CInt -> Identifier -> Attribute -> IO ()
pattern CTrue :: CBool
pattern CFalse :: CBool
notImplemented :: forall a. a
instance MLIR.AST.Serialize.FromAST MLIR.AST.Location MLIR.Native.FFI.Location
instance MLIR.AST.Serialize.FromAST MLIR.AST.Type MLIR.Native.FFI.Type
instance MLIR.AST.Serialize.FromAST MLIR.AST.Region MLIR.Native.FFI.Region
instance MLIR.AST.Serialize.FromAST MLIR.AST.Block MLIR.Native.FFI.Block
instance MLIR.AST.Serialize.FromAST MLIR.AST.Attribute MLIR.Native.FFI.Attribute
instance MLIR.AST.Serialize.FromAST MLIR.AST.Operation MLIR.Native.FFI.Operation
instance GHC.Classes.Eq MLIR.AST.Signedness
instance GHC.Classes.Eq MLIR.AST.Attribute
instance GHC.Classes.Eq MLIR.AST.Type
instance GHC.Classes.Eq MLIR.AST.DenseElements

module MLIR.AST.PatternUtil
pattern I32ArrayAttr :: [Int] -> Attribute
pattern I64ArrayAttr :: [Int] -> Attribute
pattern AffineMapArrayAttr :: [Map] -> Attribute
data DummyIx
instance GHC.Classes.Eq MLIR.AST.PatternUtil.DummyIx
instance GHC.Classes.Ord MLIR.AST.PatternUtil.DummyIx
instance GHC.Show.Show MLIR.AST.PatternUtil.DummyIx
instance GHC.Ix.Ix MLIR.AST.PatternUtil.DummyIx

module MLIR.AST.Dialect.MemRef
pattern Load :: Type -> Name -> [Name] -> Operation
pattern Store :: Name -> Name -> [Name] -> Operation

module MLIR.AST.Builder
data Value
(:>) :: Name -> Type -> Value
typeOf :: Value -> Type
operand :: Value -> Name
operands :: [Value] -> [Name]
newtype NameSupply
NameSupply :: Int -> NameSupply
[nextName] :: NameSupply -> Int
newtype NameSupplyT m a
NameSupplyT :: StateT NameSupply m a -> NameSupplyT m a
class Monad m => MonadNameSupply m
freshName :: MonadNameSupply m => m Name
evalNameSupplyT :: Monad m => NameSupplyT m a -> m a
freshValue :: MonadNameSupply m => Type -> m Value
freshBlockArg :: MonadNameSupply m => Type -> m Value
data BlockBindings
BlockBindings :: SnocList Binding -> SnocList Value -> Location -> BlockBindings
[blockBindings] :: BlockBindings -> SnocList Binding
[blockArguments] :: BlockBindings -> SnocList Value
[blockDefaultLocation] :: BlockBindings -> Location
newtype BlockBuilderT m a
BlockBuilderT :: StateT BlockBindings m a -> BlockBuilderT m a
class Monad m => MonadBlockDecl m
emitOp_ :: MonadBlockDecl m => Operation -> m ()
class MonadBlockDecl m => MonadBlockBuilder m
emitOp :: MonadBlockBuilder m => Operation -> m [Value]
blockArgument :: MonadBlockBuilder m => Type -> m Value
setDefaultLocation :: MonadBlockBuilder m => Location -> m ()
data EndOfBlock
EndOfBlock :: EndOfBlock
terminateBlock :: Monad m => m EndOfBlock
noTerminator :: Monad m => m EndOfBlock
runBlockBuilder :: Monad m => BlockBuilderT m a -> m (a, ([Value], [Binding]))
data RegionBuilderState
RegionBuilderState :: SnocList Block -> Int -> RegionBuilderState
[blocks] :: RegionBuilderState -> SnocList Block
[nextBlockId] :: RegionBuilderState -> Int
newtype RegionBuilderT m a
RegionBuilderT :: StateT RegionBuilderState m a -> RegionBuilderT m a
type BlockName = Name
class Monad m => MonadRegionBuilder m
appendBlock :: MonadRegionBuilder m => BlockBuilderT m EndOfBlock -> m BlockName
endOfRegion :: Monad m => m ()
buildRegion :: Monad m => RegionBuilderT m () -> m Region
buildBlock :: Monad m => BlockBuilderT m EndOfBlock -> RegionBuilderT m BlockName
soleBlock :: Monad m => BlockBuilderT m EndOfBlock -> m Block
buildModule :: Monad m => BlockBuilderT m () -> m Operation
declareFunction :: MonadBlockDecl m => Name -> Type -> m ()
buildFunction :: MonadBlockDecl m => Name -> [Type] -> NamedAttributes -> RegionBuilderT (NameSupplyT m) () -> m ()
buildSimpleFunction :: MonadBlockDecl m => Name -> [Type] -> NamedAttributes -> BlockBuilderT (NameSupplyT m) EndOfBlock -> m ()
newtype SnocList a
SnocList :: [a] -> SnocList a
(.:.) :: SnocList a -> a -> SnocList a
unsnocList :: SnocList a -> [a]
instance Control.Monad.Writer.Class.MonadWriter w m => Control.Monad.Writer.Class.MonadWriter w (MLIR.AST.Builder.NameSupplyT m)
instance Control.Monad.Reader.Class.MonadReader r m => Control.Monad.Reader.Class.MonadReader r (MLIR.AST.Builder.NameSupplyT m)
instance Control.Monad.Fix.MonadFix m => Control.Monad.Fix.MonadFix (MLIR.AST.Builder.NameSupplyT m)
instance Control.Monad.Trans.Class.MonadTrans MLIR.AST.Builder.NameSupplyT
instance GHC.Base.Monad m => GHC.Base.Monad (MLIR.AST.Builder.NameSupplyT m)
instance GHC.Base.Monad m => GHC.Base.Applicative (MLIR.AST.Builder.NameSupplyT m)
instance GHC.Base.Functor m => GHC.Base.Functor (MLIR.AST.Builder.NameSupplyT m)
instance Control.Monad.Writer.Class.MonadWriter w m => Control.Monad.Writer.Class.MonadWriter w (MLIR.AST.Builder.RegionBuilderT m)
instance Control.Monad.Reader.Class.MonadReader r m => Control.Monad.Reader.Class.MonadReader r (MLIR.AST.Builder.RegionBuilderT m)
instance Control.Monad.Fix.MonadFix m => Control.Monad.Fix.MonadFix (MLIR.AST.Builder.RegionBuilderT m)
instance Control.Monad.Trans.Class.MonadTrans MLIR.AST.Builder.RegionBuilderT
instance GHC.Base.Monad m => GHC.Base.Monad (MLIR.AST.Builder.RegionBuilderT m)
instance GHC.Base.Monad m => GHC.Base.Applicative (MLIR.AST.Builder.RegionBuilderT m)
instance GHC.Base.Functor m => GHC.Base.Functor (MLIR.AST.Builder.RegionBuilderT m)
instance Control.Monad.Writer.Class.MonadWriter w m => Control.Monad.Writer.Class.MonadWriter w (MLIR.AST.Builder.BlockBuilderT m)
instance Control.Monad.Reader.Class.MonadReader r m => Control.Monad.Reader.Class.MonadReader r (MLIR.AST.Builder.BlockBuilderT m)
instance Control.Monad.Fix.MonadFix m => Control.Monad.Fix.MonadFix (MLIR.AST.Builder.BlockBuilderT m)
instance Control.Monad.Trans.Class.MonadTrans MLIR.AST.Builder.BlockBuilderT
instance GHC.Base.Monad m => GHC.Base.Monad (MLIR.AST.Builder.BlockBuilderT m)
instance GHC.Base.Monad m => GHC.Base.Applicative (MLIR.AST.Builder.BlockBuilderT m)
instance GHC.Base.Functor m => GHC.Base.Functor (MLIR.AST.Builder.BlockBuilderT m)
instance Control.Monad.State.Class.MonadState s m => Control.Monad.State.Class.MonadState s (MLIR.AST.Builder.BlockBuilderT m)
instance GHC.Base.Monad m => MLIR.AST.Builder.MonadBlockDecl (MLIR.AST.Builder.BlockBuilderT m)
instance MLIR.AST.Builder.MonadNameSupply m => MLIR.AST.Builder.MonadBlockBuilder (MLIR.AST.Builder.BlockBuilderT m)
instance GHC.Base.Semigroup MLIR.AST.Builder.BlockBindings
instance GHC.Base.Monoid MLIR.AST.Builder.BlockBindings
instance Control.Monad.State.Class.MonadState s m => Control.Monad.State.Class.MonadState s (MLIR.AST.Builder.RegionBuilderT m)
instance GHC.Base.Semigroup (MLIR.AST.Builder.SnocList a)
instance GHC.Base.Monoid (MLIR.AST.Builder.SnocList a)
instance MLIR.AST.Builder.MonadNameSupply m => MLIR.AST.Builder.MonadNameSupply (Control.Monad.Trans.Reader.ReaderT r m)
instance GHC.Base.Monad m => MLIR.AST.Builder.MonadNameSupply (MLIR.AST.Builder.NameSupplyT m)
instance Control.Monad.State.Class.MonadState s m => Control.Monad.State.Class.MonadState s (MLIR.AST.Builder.NameSupplyT m)

module MLIR.AST.Rewrite
type RewriteBuilderT m = BlockBuilderT (RewriteT m)
type OpRewriteM m = Operation -> RewriteBuilderT m RewriteResult
type OpRewrite = OpRewriteM Identity
data RewriteResult
Replace :: [Value] -> RewriteResult
Skip :: RewriteResult
Traverse :: RewriteResult
pattern ReplaceOne :: Value -> RewriteResult
applyClosedOpRewrite :: OpRewrite -> Operation -> Operation
applyClosedOpRewriteT :: MonadFix m => OpRewriteM m -> Operation -> m Operation

module MLIR.AST.Dialect.X86Vector

-- | A pattern for <tt>x86vector.avx.intr.dp.ps.256</tt>.
pattern DotIntr :: () => () => Location -> Type -> operand -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>x86vector.avx.intr.dp.ps.256</tt>.
avx_intr_dp_ps_256 :: () => MonadBlockBuilder m => Type -> Value -> Value -> Value -> m Value

-- | A pattern for <tt>x86vector.avx.intr.dot</tt>.
pattern Dot :: () => () => Location -> Type -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>x86vector.avx.intr.dot</tt>.
avx_intr_dot :: () => MonadBlockBuilder m => Value -> Value -> m Value

-- | A pattern for <tt>x86vector.avx512.intr.mask.compress</tt>.
pattern MaskCompressIntr :: () => () => Location -> Type -> operand -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>x86vector.avx512.intr.mask.compress</tt>.
avx512_intr_mask_compress :: () => MonadBlockBuilder m => Type -> Value -> Value -> Value -> m Value

-- | A builder for <tt>x86vector.avx512.mask.compress</tt>.
avx512_mask_compress :: () => MonadBlockBuilder m => Type -> Value -> Value -> Maybe Value -> m Value

-- | A pattern for <tt>x86vector.avx512.mask.rndscale</tt>.
pattern MaskRndScale :: () => () => Location -> Type -> operand -> operand -> operand -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>x86vector.avx512.mask.rndscale</tt>.
avx512_mask_rndscale :: () => MonadBlockBuilder m => Type -> Value -> Value -> Value -> Value -> Value -> m Value

-- | A pattern for <tt>x86vector.avx512.intr.mask.rndscale.pd.512</tt>.
pattern MaskRndScalePDIntr :: () => () => Location -> Type -> operand -> operand -> operand -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>x86vector.avx512.intr.mask.rndscale.pd.512</tt>.
avx512_intr_mask_rndscale_pd_512 :: () => MonadBlockBuilder m => Type -> Value -> Value -> Value -> Value -> Value -> m Value

-- | A pattern for <tt>x86vector.avx512.intr.mask.rndscale.ps.512</tt>.
pattern MaskRndScalePSIntr :: () => () => Location -> Type -> operand -> operand -> operand -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>x86vector.avx512.intr.mask.rndscale.ps.512</tt>.
avx512_intr_mask_rndscale_ps_512 :: () => MonadBlockBuilder m => Type -> Value -> Value -> Value -> Value -> Value -> m Value

-- | A pattern for <tt>x86vector.avx512.mask.scalef</tt>.
pattern MaskScaleF :: () => () => Location -> Type -> operand -> operand -> operand -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>x86vector.avx512.mask.scalef</tt>.
avx512_mask_scalef :: () => MonadBlockBuilder m => Type -> Value -> Value -> Value -> Value -> Value -> m Value

-- | A pattern for <tt>x86vector.avx512.intr.mask.scalef.pd.512</tt>.
pattern MaskScaleFPDIntr :: () => () => Location -> Type -> operand -> operand -> operand -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>x86vector.avx512.intr.mask.scalef.pd.512</tt>.
avx512_intr_mask_scalef_pd_512 :: () => MonadBlockBuilder m => Type -> Value -> Value -> Value -> Value -> Value -> m Value

-- | A pattern for <tt>x86vector.avx512.intr.mask.scalef.ps.512</tt>.
pattern MaskScaleFPSIntr :: () => () => Location -> Type -> operand -> operand -> operand -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>x86vector.avx512.intr.mask.scalef.ps.512</tt>.
avx512_intr_mask_scalef_ps_512 :: () => MonadBlockBuilder m => Type -> Value -> Value -> Value -> Value -> Value -> m Value

-- | A pattern for <tt>x86vector.avx.intr.rsqrt.ps.256</tt>.
pattern RsqrtIntr :: () => () => Location -> Type -> operand -> AbstractOperation operand

-- | A builder for <tt>x86vector.avx.intr.rsqrt.ps.256</tt>.
avx_intr_rsqrt_ps_256 :: () => MonadBlockBuilder m => Value -> m Value

-- | A pattern for <tt>x86vector.avx.rsqrt</tt>.
pattern Rsqrt :: () => () => Location -> Type -> operand -> AbstractOperation operand

-- | A builder for <tt>x86vector.avx.rsqrt</tt>.
avx_rsqrt :: () => MonadBlockBuilder m => Value -> m Value

-- | A pattern for <tt>x86vector.avx512.intr.vp2intersect.d.512</tt>.
pattern Vp2IntersectDIntr :: () => () => Location -> Type -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>x86vector.avx512.intr.vp2intersect.d.512</tt>.
avx512_intr_vp2intersect_d_512 :: () => MonadBlockBuilder m => Type -> Value -> Value -> m Value

-- | A pattern for <tt>x86vector.avx512.vp2intersect</tt>.
pattern Vp2Intersect :: () => () => Location -> Type -> Type -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>x86vector.avx512.vp2intersect</tt>.
avx512_vp2intersect :: () => MonadBlockBuilder m => Type -> Type -> Value -> Value -> m [Value]

-- | A pattern for <tt>x86vector.avx512.intr.vp2intersect.q.512</tt>.
pattern Vp2IntersectQIntr :: () => () => Location -> Type -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>x86vector.avx512.intr.vp2intersect.q.512</tt>.
avx512_intr_vp2intersect_q_512 :: () => MonadBlockBuilder m => Type -> Value -> Value -> m Value

module MLIR.AST.Dialect.Vector
data IteratorType
Parallel :: IteratorType
Reduction :: IteratorType
pattern Contract :: Location -> Type -> Name -> Name -> Name -> Map -> Map -> Map -> [IteratorType] -> Operation
pattern ContractAttrs :: Map -> Map -> Map -> [IteratorType] -> NamedAttributes
pattern IteratorAttrs :: [IteratorType] -> Attribute
showIterator :: IteratorType -> ByteString
itersFromAttribute :: Attribute -> Maybe [IteratorType]

-- | A builder for <tt>vector.vscale</tt>.
vscale :: () => MonadBlockBuilder m => Type -> m Value

-- | A pattern for <tt>vector.bitcast</tt>.
pattern BitCast :: () => () => Location -> Type -> operand -> AbstractOperation operand

-- | A builder for <tt>vector.bitcast</tt>.
bitcast :: () => MonadBlockBuilder m => Type -> Value -> m Value

-- | A pattern for <tt>vector.broadcast</tt>.
pattern Broadcast :: () => () => Location -> Type -> operand -> AbstractOperation operand

-- | A builder for <tt>vector.broadcast</tt>.
broadcast :: () => MonadBlockBuilder m => Type -> Value -> m Value

-- | A builder for <tt>vector.compressstore</tt>.
compressstore :: () => MonadBlockBuilder m => Value -> [Value] -> Value -> Value -> m ()

-- | A pattern for <tt>vector.constant_mask</tt>.
pattern ConstantMask :: () => () => Location -> Type -> [Int] -> AbstractOperation operand

-- | A builder for <tt>vector.constant_mask</tt>.
constant_mask :: () => MonadBlockBuilder m => Type -> [Int] -> m Value

-- | A pattern for <tt>vector.create_mask</tt>.
pattern CreateMask :: () => () => Location -> Type -> [operand] -> AbstractOperation operand

-- | A builder for <tt>vector.create_mask</tt>.
create_mask :: () => MonadBlockBuilder m => Type -> [Value] -> m Value

-- | A builder for <tt>vector.expandload</tt>.
expandload :: () => MonadBlockBuilder m => Type -> Value -> [Value] -> Value -> Value -> m Value

-- | A builder for <tt>vector.extractelement</tt>.
extractelement :: () => MonadBlockBuilder m => Type -> Value -> Maybe Value -> m Value

-- | A pattern for <tt>vector.extract</tt>.
pattern Extract :: () => () => Location -> Type -> operand -> [Int] -> AbstractOperation operand

-- | A builder for <tt>vector.extract</tt>.
extract :: () => MonadBlockBuilder m => Type -> Value -> [Int] -> m Value

-- | A pattern for <tt>vector.extract_strided_slice</tt>.
pattern ExtractStridedSlice :: () => () => Location -> Type -> operand -> [Int] -> [Int] -> [Int] -> AbstractOperation operand

-- | A builder for <tt>vector.extract_strided_slice</tt>.
extract_strided_slice :: () => MonadBlockBuilder m => Type -> Value -> [Int] -> [Int] -> [Int] -> m Value

-- | A pattern for <tt>vector.fma</tt>.
pattern FMA :: () => () => Location -> Type -> operand -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>vector.fma</tt>.
fma :: () => MonadBlockBuilder m => Type -> Value -> Value -> Value -> m Value

-- | A pattern for <tt>vector.flat_transpose</tt>.
pattern FlatTranspose :: () => () => Location -> Type -> operand -> Int -> Int -> AbstractOperation operand

-- | A builder for <tt>vector.flat_transpose</tt>.
flat_transpose :: () => MonadBlockBuilder m => Type -> Value -> Int -> Int -> m Value

-- | A builder for <tt>vector.gather</tt>.
gather :: () => MonadBlockBuilder m => Type -> Value -> [Value] -> Value -> Value -> Value -> m Value

-- | A builder for <tt>vector.insertelement</tt>.
insertelement :: () => MonadBlockBuilder m => Type -> Value -> Value -> Maybe Value -> m Value

-- | A pattern for <tt>vector.insert</tt>.
pattern Insert :: () => () => Location -> Type -> operand -> operand -> [Int] -> AbstractOperation operand

-- | A builder for <tt>vector.insert</tt>.
insert :: () => MonadBlockBuilder m => Type -> Value -> Value -> [Int] -> m Value

-- | A pattern for <tt>vector.insert_strided_slice</tt>.
pattern InsertStridedSlice :: () => () => Location -> Type -> operand -> operand -> [Int] -> [Int] -> AbstractOperation operand

-- | A builder for <tt>vector.insert_strided_slice</tt>.
insert_strided_slice :: () => MonadBlockBuilder m => Type -> Value -> Value -> [Int] -> [Int] -> m Value

-- | A builder for <tt>vector.load</tt>.
load :: () => MonadBlockBuilder m => Type -> Value -> [Value] -> m Value

-- | A builder for <tt>vector.mask</tt>.
mask :: () => MonadBlockBuilder m => Maybe Type -> Value -> Maybe Value -> RegionBuilderT m () -> m Value

-- | A builder for <tt>vector.maskedload</tt>.
maskedload :: () => MonadBlockBuilder m => Type -> Value -> [Value] -> Value -> Value -> m Value

-- | A builder for <tt>vector.maskedstore</tt>.
maskedstore :: () => MonadBlockBuilder m => Value -> [Value] -> Value -> Value -> m ()

-- | A pattern for <tt>vector.matrix_multiply</tt>.
pattern Matmul :: () => () => Location -> Type -> operand -> operand -> Int -> Int -> Int -> AbstractOperation operand

-- | A builder for <tt>vector.matrix_multiply</tt>.
matrix_multiply :: () => MonadBlockBuilder m => Type -> Value -> Value -> Int -> Int -> Int -> m Value

-- | A builder for <tt>vector.outerproduct</tt>.
outerproduct :: () => MonadBlockBuilder m => Type -> Value -> Value -> [Value] -> m Value

-- | A pattern for <tt>vector.print</tt>.
pattern Print :: () => () => Location -> operand -> AbstractOperation operand

-- | A builder for <tt>vector.print</tt>.
print :: () => MonadBlockBuilder m => Value -> m ()

-- | A builder for <tt>vector.reshape</tt>.
reshape :: () => MonadBlockBuilder m => Type -> Value -> [Value] -> [Value] -> [Int] -> m Value

-- | A pattern for <tt>vector.scalable.extract</tt>.
pattern ScalableExtract :: () => () => Location -> Type -> operand -> Int -> AbstractOperation operand

-- | A builder for <tt>vector.scalable.extract</tt>.
scalable_extract :: () => MonadBlockBuilder m => Type -> Value -> Int -> m Value

-- | A pattern for <tt>vector.scalable.insert</tt>.
pattern ScalableInsert :: () => () => Location -> Type -> operand -> operand -> Int -> AbstractOperation operand

-- | A builder for <tt>vector.scalable.insert</tt>.
scalable_insert :: () => MonadBlockBuilder m => Type -> Value -> Value -> Int -> m Value

-- | A builder for <tt>vector.scatter</tt>.
scatter :: () => MonadBlockBuilder m => Value -> [Value] -> Value -> Value -> Value -> m ()

-- | A pattern for <tt>vector.shape_cast</tt>.
pattern ShapeCast :: () => () => Location -> Type -> operand -> AbstractOperation operand

-- | A builder for <tt>vector.shape_cast</tt>.
shape_cast :: () => MonadBlockBuilder m => Type -> Value -> m Value

-- | A pattern for <tt>vector.shuffle</tt>.
pattern Shuffle :: () => () => Location -> Type -> operand -> operand -> [Int] -> AbstractOperation operand

-- | A builder for <tt>vector.shuffle</tt>.
shuffle :: () => MonadBlockBuilder m => Type -> Value -> Value -> [Int] -> m Value

-- | A pattern for <tt>vector.splat</tt>.
pattern Splat :: () => () => Location -> Type -> operand -> AbstractOperation operand

-- | A builder for <tt>vector.splat</tt>.
splat :: () => MonadBlockBuilder m => Type -> Value -> m Value

-- | A builder for <tt>vector.store</tt>.
store :: () => MonadBlockBuilder m => Value -> Value -> [Value] -> m ()

-- | A builder for <tt>vector.transfer_read</tt>.
transfer_read :: () => MonadBlockBuilder m => Type -> Value -> [Value] -> Value -> Maybe Value -> Map -> m Value

-- | A builder for <tt>vector.transfer_write</tt>.
transfer_write :: () => MonadBlockBuilder m => Maybe Type -> Value -> Value -> [Value] -> Maybe Value -> Map -> m Value

-- | A pattern for <tt>vector.transpose</tt>.
pattern Transpose :: () => () => Location -> Type -> operand -> [Int] -> AbstractOperation operand

-- | A builder for <tt>vector.transpose</tt>.
transpose :: () => MonadBlockBuilder m => Type -> Value -> [Int] -> m Value

-- | A pattern for <tt>vector.type_cast</tt>.
pattern TypeCast :: () => () => Location -> Type -> operand -> AbstractOperation operand

-- | A builder for <tt>vector.type_cast</tt>.
type_cast :: () => MonadBlockBuilder m => Type -> Value -> m Value

-- | A builder for <tt>vector.warp_execute_on_lane_0</tt>.
warp_execute_on_lane_0 :: () => MonadBlockBuilder m => [Type] -> Value -> [Value] -> Int -> RegionBuilderT m () -> m Value

-- | A pattern for <tt>vector.yield</tt>.
pattern Yield :: () => () => Location -> [operand] -> AbstractOperation operand

-- | A builder for <tt>vector.yield</tt>.
yield :: () => MonadBlockBuilder m => [Value] -> m EndOfBlock

module MLIR.AST.Dialect.Tensor

-- | A pattern for <tt>tensor.cast</tt>.
pattern Cast :: () => () => Location -> Type -> operand -> AbstractOperation operand

-- | A builder for <tt>tensor.cast</tt>.
cast :: () => MonadBlockBuilder m => Type -> Value -> m Value

-- | A pattern for <tt>tensor.dim</tt>.
pattern Dim :: () => () => Location -> Type -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>tensor.dim</tt>.
dim :: () => MonadBlockBuilder m => Type -> Value -> Value -> m Value

-- | A pattern for <tt>tensor.empty</tt>.
pattern Empty :: () => () => Location -> Type -> [operand] -> AbstractOperation operand

-- | A builder for <tt>tensor.empty</tt>.
empty :: () => MonadBlockBuilder m => Type -> [Value] -> m Value

-- | A builder for <tt>tensor.extract</tt>.
extract :: () => MonadBlockBuilder m => Type -> Value -> [Value] -> m Value

-- | A pattern for <tt>tensor.from_elements</tt>.
pattern FromElements :: () => () => Location -> Type -> [operand] -> AbstractOperation operand

-- | A builder for <tt>tensor.from_elements</tt>.
from_elements :: () => MonadBlockBuilder m => Type -> [Value] -> m Value

-- | A builder for <tt>tensor.generate</tt>.
generate :: () => MonadBlockBuilder m => Type -> [Value] -> RegionBuilderT m () -> m Value

-- | A builder for <tt>tensor.insert</tt>.
insert :: () => MonadBlockBuilder m => Type -> Value -> Value -> [Value] -> m Value

-- | A pattern for <tt>tensor.rank</tt>.
pattern Rank :: () => () => Location -> Type -> operand -> AbstractOperation operand

-- | A builder for <tt>tensor.rank</tt>.
rank :: () => MonadBlockBuilder m => Type -> Value -> m Value

-- | A pattern for <tt>tensor.reshape</tt>.
pattern Reshape :: () => () => Location -> Type -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>tensor.reshape</tt>.
reshape :: () => MonadBlockBuilder m => Type -> Value -> Value -> m Value

-- | A pattern for <tt>tensor.splat</tt>.
pattern Splat :: () => () => Location -> Type -> operand -> AbstractOperation operand

-- | A builder for <tt>tensor.splat</tt>.
splat :: () => MonadBlockBuilder m => Type -> Value -> m Value

-- | A pattern for <tt>tensor.yield</tt>.
pattern Yield :: () => () => Location -> operand -> AbstractOperation operand

-- | A builder for <tt>tensor.yield</tt>.
yield :: () => MonadBlockBuilder m => Value -> m EndOfBlock

module MLIR.AST.Dialect.Shape

-- | A pattern for <tt>shape.add</tt>.
pattern Add :: () => () => Location -> Type -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>shape.add</tt>.
add :: () => MonadBlockBuilder m => Type -> Value -> Value -> m Value

-- | A pattern for <tt>shape.any</tt>.
pattern Any :: () => () => Location -> Type -> [operand] -> AbstractOperation operand

-- | A builder for <tt>shape.any</tt>.
any :: () => MonadBlockBuilder m => Type -> [Value] -> m Value

-- | A pattern for <tt>shape.assuming_all</tt>.
pattern AssumingAll :: () => () => Location -> Type -> [operand] -> AbstractOperation operand

-- | A builder for <tt>shape.assuming_all</tt>.
assuming_all :: () => MonadBlockBuilder m => Type -> [Value] -> m Value

-- | A builder for <tt>shape.assuming</tt>.
assuming :: () => MonadBlockBuilder m => [Type] -> Value -> RegionBuilderT m () -> m Value

-- | A pattern for <tt>shape.assuming_yield</tt>.
pattern AssumingYield :: () => () => Location -> [operand] -> AbstractOperation operand

-- | A builder for <tt>shape.assuming_yield</tt>.
assuming_yield :: () => MonadBlockBuilder m => [Value] -> m EndOfBlock

-- | A pattern for <tt>shape.broadcast</tt>.
pattern Broadcast :: () => () => Location -> Type -> [operand] -> Maybe ByteString -> AbstractOperation operand

-- | A builder for <tt>shape.broadcast</tt>.
broadcast :: () => MonadBlockBuilder m => Type -> [Value] -> Maybe ByteString -> m Value

-- | A pattern for <tt>shape.concat</tt>.
pattern Concat :: () => () => Location -> Type -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>shape.concat</tt>.
concat :: () => MonadBlockBuilder m => Type -> Value -> Value -> m Value

-- | A pattern for <tt>shape.const_size</tt>.
pattern ConstSize :: () => () => Location -> Type -> Int -> AbstractOperation operand

-- | A builder for <tt>shape.const_size</tt>.
const_size :: () => MonadBlockBuilder m => Type -> Int -> m Value

-- | A pattern for <tt>shape.const_witness</tt>.
pattern ConstWitness :: () => () => Location -> Type -> Bool -> AbstractOperation operand

-- | A builder for <tt>shape.const_witness</tt>.
const_witness :: () => MonadBlockBuilder m => Type -> Bool -> m Value

-- | A pattern for <tt>shape.cstr_broadcastable</tt>.
pattern CstrBroadcastable :: () => () => Location -> Type -> [operand] -> AbstractOperation operand

-- | A builder for <tt>shape.cstr_broadcastable</tt>.
cstr_broadcastable :: () => MonadBlockBuilder m => Type -> [Value] -> m Value

-- | A pattern for <tt>shape.cstr_eq</tt>.
pattern CstrEq :: () => () => Location -> Type -> [operand] -> AbstractOperation operand

-- | A builder for <tt>shape.cstr_eq</tt>.
cstr_eq :: () => MonadBlockBuilder m => Type -> [Value] -> m Value

-- | A pattern for <tt>shape.cstr_require</tt>.
pattern CstrRequire :: () => () => Location -> Type -> operand -> ByteString -> AbstractOperation operand

-- | A builder for <tt>shape.cstr_require</tt>.
cstr_require :: () => MonadBlockBuilder m => Type -> Value -> ByteString -> m Value

-- | A pattern for <tt>shape.debug_print</tt>.
pattern DebugPrint :: () => () => Location -> Type -> operand -> AbstractOperation operand

-- | A builder for <tt>shape.debug_print</tt>.
debug_print :: () => MonadBlockBuilder m => Type -> Value -> m Value

-- | A pattern for <tt>shape.dim</tt>.
pattern Dim :: () => () => Location -> Type -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>shape.dim</tt>.
dim :: () => MonadBlockBuilder m => Type -> Value -> Value -> m Value

-- | A pattern for <tt>shape.div</tt>.
pattern Div :: () => () => Location -> Type -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>shape.div</tt>.
div :: () => MonadBlockBuilder m => Type -> Value -> Value -> m Value

-- | A pattern for <tt>shape.from_extent_tensor</tt>.
pattern FromExtentTensor :: () => () => Location -> Type -> operand -> AbstractOperation operand

-- | A builder for <tt>shape.from_extent_tensor</tt>.
from_extent_tensor :: () => MonadBlockBuilder m => Type -> Value -> m Value

-- | A pattern for <tt>shape.from_extents</tt>.
pattern FromExtents :: () => () => Location -> Type -> [operand] -> AbstractOperation operand

-- | A builder for <tt>shape.from_extents</tt>.
from_extents :: () => MonadBlockBuilder m => Type -> [Value] -> m Value

-- | A builder for <tt>shape.function_library</tt>.
function_library :: () => MonadBlockBuilder m => Map Name Attribute -> RegionBuilderT m () -> m ()

-- | A pattern for <tt>shape.get_extent</tt>.
pattern GetExtent :: () => () => Location -> Type -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>shape.get_extent</tt>.
get_extent :: () => MonadBlockBuilder m => Type -> Value -> Value -> m Value

-- | A pattern for <tt>shape.index_to_size</tt>.
pattern IndexToSize :: () => () => Location -> Type -> operand -> AbstractOperation operand

-- | A builder for <tt>shape.index_to_size</tt>.
index_to_size :: () => MonadBlockBuilder m => Type -> Value -> m Value

-- | A pattern for <tt>shape.is_broadcastable</tt>.
pattern IsBroadcastable :: () => () => Location -> Type -> [operand] -> AbstractOperation operand

-- | A builder for <tt>shape.is_broadcastable</tt>.
is_broadcastable :: () => MonadBlockBuilder m => Type -> [Value] -> m Value

-- | A pattern for <tt>shape.max</tt>.
pattern Max :: () => () => Location -> Type -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>shape.max</tt>.
max :: () => MonadBlockBuilder m => Type -> Value -> Value -> m Value

-- | A pattern for <tt>shape.meet</tt>.
pattern Meet :: () => () => Location -> Type -> operand -> operand -> Maybe ByteString -> AbstractOperation operand

-- | A builder for <tt>shape.meet</tt>.
meet :: () => MonadBlockBuilder m => Type -> Value -> Value -> Maybe ByteString -> m Value

-- | A pattern for <tt>shape.min</tt>.
pattern Min :: () => () => Location -> Type -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>shape.min</tt>.
min :: () => MonadBlockBuilder m => Type -> Value -> Value -> m Value

-- | A pattern for <tt>shape.mul</tt>.
pattern Mul :: () => () => Location -> Type -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>shape.mul</tt>.
mul :: () => MonadBlockBuilder m => Type -> Value -> Value -> m Value

-- | A pattern for <tt>shape.num_elements</tt>.
pattern NumElements :: () => () => Location -> Type -> operand -> AbstractOperation operand

-- | A builder for <tt>shape.num_elements</tt>.
num_elements :: () => MonadBlockBuilder m => Type -> Value -> m Value

-- | A pattern for <tt>shape.rank</tt>.
pattern Rank :: () => () => Location -> Type -> operand -> AbstractOperation operand

-- | A builder for <tt>shape.rank</tt>.
rank :: () => MonadBlockBuilder m => Type -> Value -> m Value

-- | A builder for <tt>shape.reduce</tt>.
reduce :: () => MonadBlockBuilder m => [Type] -> Value -> [Value] -> RegionBuilderT m () -> m Value

-- | A pattern for <tt>shape.return</tt>.
pattern Return :: () => () => Location -> [operand] -> AbstractOperation operand

-- | A builder for <tt>shape.return</tt>.
return :: () => MonadBlockBuilder m => [Value] -> m EndOfBlock

-- | A pattern for <tt>shape.shape_eq</tt>.
pattern ShapeEq :: () => () => Location -> Type -> [operand] -> AbstractOperation operand

-- | A builder for <tt>shape.shape_eq</tt>.
shape_eq :: () => MonadBlockBuilder m => Type -> [Value] -> m Value

-- | A pattern for <tt>shape.shape_of</tt>.
pattern ShapeOf :: () => () => Location -> Type -> operand -> AbstractOperation operand

-- | A builder for <tt>shape.shape_of</tt>.
shape_of :: () => MonadBlockBuilder m => Type -> Value -> m Value

-- | A pattern for <tt>shape.size_to_index</tt>.
pattern SizeToIndex :: () => () => Location -> Type -> operand -> AbstractOperation operand

-- | A builder for <tt>shape.size_to_index</tt>.
size_to_index :: () => MonadBlockBuilder m => Type -> Value -> m Value

-- | A pattern for <tt>shape.split_at</tt>.
pattern SplitAt :: () => () => Location -> Type -> Type -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>shape.split_at</tt>.
split_at :: () => MonadBlockBuilder m => Type -> Type -> Value -> Value -> m [Value]

-- | A pattern for <tt>shape.to_extent_tensor</tt>.
pattern ToExtentTensor :: () => () => Location -> Type -> operand -> AbstractOperation operand

-- | A builder for <tt>shape.to_extent_tensor</tt>.
to_extent_tensor :: () => MonadBlockBuilder m => Type -> Value -> m Value

-- | A pattern for <tt>shape.value_as_shape</tt>.
pattern ValueAsShape :: () => () => Location -> Type -> operand -> AbstractOperation operand

-- | A builder for <tt>shape.value_as_shape</tt>.
value_as_shape :: () => MonadBlockBuilder m => Type -> Value -> m Value

-- | A pattern for <tt>shape.value_of</tt>.
pattern ValueOf :: () => () => Location -> Type -> operand -> AbstractOperation operand

-- | A builder for <tt>shape.value_of</tt>.
value_of :: () => MonadBlockBuilder m => Type -> Value -> m Value

-- | A pattern for <tt>shape.with_shape</tt>.
pattern With :: () => () => Location -> Type -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>shape.with_shape</tt>.
with_shape :: () => MonadBlockBuilder m => Type -> Value -> Value -> m Value

-- | A pattern for <tt>shape.yield</tt>.
pattern Yield :: () => () => Location -> [operand] -> AbstractOperation operand

-- | A builder for <tt>shape.yield</tt>.
yield :: () => MonadBlockBuilder m => [Value] -> m EndOfBlock

module MLIR.AST.Dialect.Linalg

-- | A pattern for <tt>linalg.index</tt>.
pattern Linalg_Index :: () => () => Location -> Type -> Int -> AbstractOperation operand

-- | A builder for <tt>linalg.index</tt>.
index :: () => MonadBlockBuilder m => Type -> Int -> m Value

-- | A pattern for <tt>linalg.yield</tt>.
pattern Linalg_Yield :: () => () => Location -> [operand] -> AbstractOperation operand

-- | A builder for <tt>linalg.yield</tt>.
yield :: () => MonadBlockBuilder m => [Value] -> m EndOfBlock

-- | A builder for <tt>linalg.batch_matmul</tt>.
batch_matmul :: () => MonadBlockBuilder m => [Type] -> [Value] -> [Value] -> RegionBuilderT m () -> m Value

-- | A builder for <tt>linalg.batch_matvec</tt>.
batch_matvec :: () => MonadBlockBuilder m => [Type] -> [Value] -> [Value] -> RegionBuilderT m () -> m Value

-- | A builder for <tt>linalg.batch_reduce_matmul</tt>.
batch_reduce_matmul :: () => MonadBlockBuilder m => [Type] -> [Value] -> [Value] -> RegionBuilderT m () -> m Value

-- | A builder for <tt>linalg.conv_1d_ncw_fcw</tt>.
conv_1d_ncw_fcw :: () => MonadBlockBuilder m => [Type] -> [Value] -> [Value] -> RegionBuilderT m () -> m Value

-- | A builder for <tt>linalg.conv_1d_nwc_wcf</tt>.
conv_1d_nwc_wcf :: () => MonadBlockBuilder m => [Type] -> [Value] -> [Value] -> RegionBuilderT m () -> m Value

-- | A builder for <tt>linalg.conv_1d</tt>.
conv_1d :: () => MonadBlockBuilder m => [Type] -> [Value] -> [Value] -> RegionBuilderT m () -> m Value

-- | A builder for <tt>linalg.conv_2d_nchw_fchw</tt>.
conv_2d_nchw_fchw :: () => MonadBlockBuilder m => [Type] -> [Value] -> [Value] -> RegionBuilderT m () -> m Value

-- | A builder for <tt>linalg.conv_2d_ngchw_fgchw</tt>.
conv_2d_ngchw_fgchw :: () => MonadBlockBuilder m => [Type] -> [Value] -> [Value] -> RegionBuilderT m () -> m Value

-- | A builder for <tt>linalg.conv_2d_nhwc_fhwc</tt>.
conv_2d_nhwc_fhwc :: () => MonadBlockBuilder m => [Type] -> [Value] -> [Value] -> RegionBuilderT m () -> m Value

-- | A builder for <tt>linalg.conv_2d_nhwc_hwcf</tt>.
conv_2d_nhwc_hwcf :: () => MonadBlockBuilder m => [Type] -> [Value] -> [Value] -> RegionBuilderT m () -> m Value

-- | A builder for <tt>linalg.conv_2d_nhwc_hwcf_q</tt>.
conv_2d_nhwc_hwcf_q :: () => MonadBlockBuilder m => [Type] -> [Value] -> [Value] -> RegionBuilderT m () -> m Value

-- | A builder for <tt>linalg.conv_2d</tt>.
conv_2d :: () => MonadBlockBuilder m => [Type] -> [Value] -> [Value] -> RegionBuilderT m () -> m Value

-- | A builder for <tt>linalg.conv_3d_ndhwc_dhwcf</tt>.
conv_3d_ndhwc_dhwcf :: () => MonadBlockBuilder m => [Type] -> [Value] -> [Value] -> RegionBuilderT m () -> m Value

-- | A builder for <tt>linalg.conv_3d</tt>.
conv_3d :: () => MonadBlockBuilder m => [Type] -> [Value] -> [Value] -> RegionBuilderT m () -> m Value

-- | A builder for <tt>linalg.copy</tt>.
copy :: () => MonadBlockBuilder m => [Type] -> [Value] -> [Value] -> RegionBuilderT m () -> m Value

-- | A builder for <tt>linalg.depthwise_conv_1d_nwc_wc</tt>.
depthwise_conv_1d_nwc_wc :: () => MonadBlockBuilder m => [Type] -> [Value] -> [Value] -> RegionBuilderT m () -> m Value

-- | A builder for <tt>linalg.depthwise_conv_1d_nwc_wcm</tt>.
depthwise_conv_1d_nwc_wcm :: () => MonadBlockBuilder m => [Type] -> [Value] -> [Value] -> RegionBuilderT m () -> m Value

-- | A builder for <tt>linalg.depthwise_conv_2d_nchw_chw</tt>.
depthwise_conv_2d_nchw_chw :: () => MonadBlockBuilder m => [Type] -> [Value] -> [Value] -> RegionBuilderT m () -> m Value

-- | A builder for <tt>linalg.depthwise_conv_2d_nhwc_hwc</tt>.
depthwise_conv_2d_nhwc_hwc :: () => MonadBlockBuilder m => [Type] -> [Value] -> [Value] -> RegionBuilderT m () -> m Value

-- | A builder for <tt>linalg.depthwise_conv_2d_nhwc_hwc_q</tt>.
depthwise_conv_2d_nhwc_hwc_q :: () => MonadBlockBuilder m => [Type] -> [Value] -> [Value] -> RegionBuilderT m () -> m Value

-- | A builder for <tt>linalg.depthwise_conv_2d_nhwc_hwcm</tt>.
depthwise_conv_2d_nhwc_hwcm :: () => MonadBlockBuilder m => [Type] -> [Value] -> [Value] -> RegionBuilderT m () -> m Value

-- | A builder for <tt>linalg.depthwise_conv_2d_nhwc_hwcm_q</tt>.
depthwise_conv_2d_nhwc_hwcm_q :: () => MonadBlockBuilder m => [Type] -> [Value] -> [Value] -> RegionBuilderT m () -> m Value

-- | A builder for <tt>linalg.depthwise_conv_3d_ndhwc_dhwc</tt>.
depthwise_conv_3d_ndhwc_dhwc :: () => MonadBlockBuilder m => [Type] -> [Value] -> [Value] -> RegionBuilderT m () -> m Value

-- | A builder for <tt>linalg.depthwise_conv_3d_ndhwc_dhwcm</tt>.
depthwise_conv_3d_ndhwc_dhwcm :: () => MonadBlockBuilder m => [Type] -> [Value] -> [Value] -> RegionBuilderT m () -> m Value

-- | A builder for <tt>linalg.dot</tt>.
dot :: () => MonadBlockBuilder m => [Type] -> [Value] -> [Value] -> RegionBuilderT m () -> m Value

-- | A builder for <tt>linalg.elemwise_binary</tt>.
elemwise_binary :: () => MonadBlockBuilder m => [Type] -> [Value] -> [Value] -> RegionBuilderT m () -> m Value

-- | A builder for <tt>linalg.elemwise_unary</tt>.
elemwise_unary :: () => MonadBlockBuilder m => [Type] -> [Value] -> [Value] -> RegionBuilderT m () -> m Value

-- | A builder for <tt>linalg.fill</tt>.
fill :: () => MonadBlockBuilder m => [Type] -> [Value] -> [Value] -> RegionBuilderT m () -> m Value

-- | A builder for <tt>linalg.fill_rng_2d</tt>.
fill_rng_2d :: () => MonadBlockBuilder m => [Type] -> [Value] -> [Value] -> RegionBuilderT m () -> m Value

-- | A builder for <tt>linalg.map</tt>.
map :: () => MonadBlockBuilder m => [Type] -> [Value] -> Value -> RegionBuilderT m () -> m Value

-- | A builder for <tt>linalg.matmul</tt>.
matmul :: () => MonadBlockBuilder m => [Type] -> [Value] -> [Value] -> RegionBuilderT m () -> m Value

-- | A builder for <tt>linalg.matmul_unsigned</tt>.
matmul_unsigned :: () => MonadBlockBuilder m => [Type] -> [Value] -> [Value] -> RegionBuilderT m () -> m Value

-- | A builder for <tt>linalg.matvec</tt>.
matvec :: () => MonadBlockBuilder m => [Type] -> [Value] -> [Value] -> RegionBuilderT m () -> m Value

-- | A builder for <tt>linalg.mmt4d</tt>.
mmt4d :: () => MonadBlockBuilder m => [Type] -> [Value] -> [Value] -> RegionBuilderT m () -> m Value

-- | A builder for <tt>linalg.pooling_nchw_max</tt>.
pooling_nchw_max :: () => MonadBlockBuilder m => [Type] -> [Value] -> [Value] -> RegionBuilderT m () -> m Value

-- | A builder for <tt>linalg.pooling_nchw_sum</tt>.
pooling_nchw_sum :: () => MonadBlockBuilder m => [Type] -> [Value] -> [Value] -> RegionBuilderT m () -> m Value

-- | A builder for <tt>linalg.pooling_ndhwc_max</tt>.
pooling_ndhwc_max :: () => MonadBlockBuilder m => [Type] -> [Value] -> [Value] -> RegionBuilderT m () -> m Value

-- | A builder for <tt>linalg.pooling_ndhwc_min</tt>.
pooling_ndhwc_min :: () => MonadBlockBuilder m => [Type] -> [Value] -> [Value] -> RegionBuilderT m () -> m Value

-- | A builder for <tt>linalg.pooling_ndhwc_sum</tt>.
pooling_ndhwc_sum :: () => MonadBlockBuilder m => [Type] -> [Value] -> [Value] -> RegionBuilderT m () -> m Value

-- | A builder for <tt>linalg.pooling_nhwc_max</tt>.
pooling_nhwc_max :: () => MonadBlockBuilder m => [Type] -> [Value] -> [Value] -> RegionBuilderT m () -> m Value

-- | A builder for <tt>linalg.pooling_nhwc_max_unsigned</tt>.
pooling_nhwc_max_unsigned :: () => MonadBlockBuilder m => [Type] -> [Value] -> [Value] -> RegionBuilderT m () -> m Value

-- | A builder for <tt>linalg.pooling_nhwc_min</tt>.
pooling_nhwc_min :: () => MonadBlockBuilder m => [Type] -> [Value] -> [Value] -> RegionBuilderT m () -> m Value

-- | A builder for <tt>linalg.pooling_nhwc_min_unsigned</tt>.
pooling_nhwc_min_unsigned :: () => MonadBlockBuilder m => [Type] -> [Value] -> [Value] -> RegionBuilderT m () -> m Value

-- | A builder for <tt>linalg.pooling_nhwc_sum</tt>.
pooling_nhwc_sum :: () => MonadBlockBuilder m => [Type] -> [Value] -> [Value] -> RegionBuilderT m () -> m Value

-- | A builder for <tt>linalg.quantized_batch_matmul</tt>.
quantized_batch_matmul :: () => MonadBlockBuilder m => [Type] -> [Value] -> [Value] -> RegionBuilderT m () -> m Value

-- | A builder for <tt>linalg.quantized_matmul</tt>.
quantized_matmul :: () => MonadBlockBuilder m => [Type] -> [Value] -> [Value] -> RegionBuilderT m () -> m Value

-- | A builder for <tt>linalg.vecmat</tt>.
vecmat :: () => MonadBlockBuilder m => [Type] -> [Value] -> [Value] -> RegionBuilderT m () -> m Value

module MLIR.AST.Dialect.LLVM
data Type
PointerType :: Type -> Type
ArrayType :: Int -> Type -> Type
VoidType :: Type
LiteralStructType :: [Type] -> Type
pattern Ptr :: Type -> Type
pattern Array :: Int -> Type -> Type
pattern Void :: Type
pattern LiteralStruct :: [Type] -> Type

-- | A pattern for <tt>llvm.ashr</tt>.
pattern AShr :: () => () => Location -> Type -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>llvm.ashr</tt>.
ashr :: () => MonadBlockBuilder m => Value -> Value -> m Value

-- | A pattern for <tt>llvm.add</tt>.
pattern Add :: () => () => Location -> Type -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>llvm.add</tt>.
add :: () => MonadBlockBuilder m => Value -> Value -> m Value

-- | A pattern for <tt>llvm.addrspacecast</tt>.
pattern AddrSpaceCast :: () => () => Location -> Type -> operand -> AbstractOperation operand

-- | A builder for <tt>llvm.addrspacecast</tt>.
addrspacecast :: () => MonadBlockBuilder m => Type -> Value -> m Value

-- | A pattern for <tt>llvm.alloca</tt>.
pattern Alloca :: () => () => Location -> Type -> operand -> Maybe Int -> AbstractOperation operand

-- | A builder for <tt>llvm.alloca</tt>.
alloca :: () => MonadBlockBuilder m => Type -> Value -> Maybe Int -> m Value

-- | A pattern for <tt>llvm.and</tt>.
pattern And :: () => () => Location -> Type -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>llvm.and</tt>.
and :: () => MonadBlockBuilder m => Value -> Value -> m Value

-- | A pattern for <tt>llvm.bitcast</tt>.
pattern Bitcast :: () => () => Location -> Type -> operand -> AbstractOperation operand

-- | A builder for <tt>llvm.bitcast</tt>.
bitcast :: () => MonadBlockBuilder m => Type -> Value -> m Value

-- | A builder for <tt>llvm.call</tt>.
call :: () => MonadBlockBuilder m => Maybe Type -> [Value] -> m Value

-- | A pattern for <tt>llvm.mlir.constant</tt>.
pattern Constant :: () => () => Location -> Type -> Attribute -> AbstractOperation operand

-- | A builder for <tt>llvm.mlir.constant</tt>.
mlir_constant :: () => MonadBlockBuilder m => Type -> Attribute -> m Value

-- | A pattern for <tt>llvm.extractelement</tt>.
pattern ExtractElement :: () => () => Location -> Type -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>llvm.extractelement</tt>.
extractelement :: () => MonadBlockBuilder m => Type -> Value -> Value -> m Value

-- | A pattern for <tt>llvm.fadd</tt>.
pattern FAdd :: () => () => Location -> Type -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>llvm.fadd</tt>.
fadd :: () => MonadBlockBuilder m => Value -> Value -> m Value

-- | A pattern for <tt>llvm.fdiv</tt>.
pattern FDiv :: () => () => Location -> Type -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>llvm.fdiv</tt>.
fdiv :: () => MonadBlockBuilder m => Value -> Value -> m Value

-- | A pattern for <tt>llvm.fmul</tt>.
pattern FMul :: () => () => Location -> Type -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>llvm.fmul</tt>.
fmul :: () => MonadBlockBuilder m => Value -> Value -> m Value

-- | A pattern for <tt>llvm.fneg</tt>.
pattern FNeg :: () => () => Location -> Type -> operand -> AbstractOperation operand

-- | A builder for <tt>llvm.fneg</tt>.
fneg :: () => MonadBlockBuilder m => Value -> m Value

-- | A pattern for <tt>llvm.fpext</tt>.
pattern FPExt :: () => () => Location -> Type -> operand -> AbstractOperation operand

-- | A builder for <tt>llvm.fpext</tt>.
fpext :: () => MonadBlockBuilder m => Type -> Value -> m Value

-- | A pattern for <tt>llvm.fptosi</tt>.
pattern FPToSI :: () => () => Location -> Type -> operand -> AbstractOperation operand

-- | A builder for <tt>llvm.fptosi</tt>.
fptosi :: () => MonadBlockBuilder m => Type -> Value -> m Value

-- | A pattern for <tt>llvm.fptoui</tt>.
pattern FPToUI :: () => () => Location -> Type -> operand -> AbstractOperation operand

-- | A builder for <tt>llvm.fptoui</tt>.
fptoui :: () => MonadBlockBuilder m => Type -> Value -> m Value

-- | A pattern for <tt>llvm.fptrunc</tt>.
pattern FPTrunc :: () => () => Location -> Type -> operand -> AbstractOperation operand

-- | A builder for <tt>llvm.fptrunc</tt>.
fptrunc :: () => MonadBlockBuilder m => Type -> Value -> m Value

-- | A pattern for <tt>llvm.frem</tt>.
pattern FRem :: () => () => Location -> Type -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>llvm.frem</tt>.
frem :: () => MonadBlockBuilder m => Value -> Value -> m Value

-- | A pattern for <tt>llvm.fsub</tt>.
pattern FSub :: () => () => Location -> Type -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>llvm.fsub</tt>.
fsub :: () => MonadBlockBuilder m => Value -> Value -> m Value

-- | A pattern for <tt>llvm.freeze</tt>.
pattern Freeze :: () => () => Location -> Type -> operand -> AbstractOperation operand

-- | A builder for <tt>llvm.freeze</tt>.
freeze :: () => MonadBlockBuilder m => Value -> m Value

-- | A builder for <tt>llvm.getelementptr</tt>.
getelementptr :: () => MonadBlockBuilder m => Type -> Value -> [Value] -> [Int] -> m Value

-- | A builder for <tt>llvm.inline_asm</tt>.
inline_asm :: () => MonadBlockBuilder m => Maybe Type -> [Value] -> ByteString -> ByteString -> Maybe [Attribute] -> m Value

-- | A pattern for <tt>llvm.insertelement</tt>.
pattern InsertElement :: () => () => Location -> Type -> operand -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>llvm.insertelement</tt>.
insertelement :: () => MonadBlockBuilder m => Type -> Value -> Value -> Value -> m Value

-- | A pattern for <tt>llvm.inttoptr</tt>.
pattern IntToPtr :: () => () => Location -> Type -> operand -> AbstractOperation operand

-- | A builder for <tt>llvm.inttoptr</tt>.
inttoptr :: () => MonadBlockBuilder m => Type -> Value -> m Value

-- | A pattern for <tt>llvm.lshr</tt>.
pattern LShr :: () => () => Location -> Type -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>llvm.lshr</tt>.
lshr :: () => MonadBlockBuilder m => Value -> Value -> m Value

-- | A pattern for <tt>llvm.landingpad</tt>.
pattern Landingpad :: () => () => Location -> Type -> [operand] -> AbstractOperation operand

-- | A builder for <tt>llvm.landingpad</tt>.
landingpad :: () => MonadBlockBuilder m => Type -> [Value] -> m Value

-- | A pattern for <tt>llvm.load</tt>.
pattern Load :: () => () => Location -> Type -> operand -> Maybe Int -> AbstractOperation operand

-- | A builder for <tt>llvm.load</tt>.
load :: () => MonadBlockBuilder m => Type -> Value -> Maybe Int -> m Value

-- | A pattern for <tt>llvm.mul</tt>.
pattern Mul :: () => () => Location -> Type -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>llvm.mul</tt>.
mul :: () => MonadBlockBuilder m => Value -> Value -> m Value

-- | A pattern for <tt>llvm.mlir.null</tt>.
pattern Null :: () => () => Location -> Type -> AbstractOperation operand

-- | A builder for <tt>llvm.mlir.null</tt>.
mlir_null :: () => MonadBlockBuilder m => Type -> m Value

-- | A pattern for <tt>llvm.or</tt>.
pattern Or :: () => () => Location -> Type -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>llvm.or</tt>.
or :: () => MonadBlockBuilder m => Value -> Value -> m Value

-- | A pattern for <tt>llvm.ptrtoint</tt>.
pattern PtrToInt :: () => () => Location -> Type -> operand -> AbstractOperation operand

-- | A builder for <tt>llvm.ptrtoint</tt>.
ptrtoint :: () => MonadBlockBuilder m => Type -> Value -> m Value

-- | A pattern for <tt>llvm.resume</tt>.
pattern Resume :: () => () => Location -> operand -> AbstractOperation operand

-- | A builder for <tt>llvm.resume</tt>.
resume :: () => MonadBlockBuilder m => Value -> m EndOfBlock

-- | A builder for <tt>llvm.return</tt>.
return :: () => MonadBlockBuilder m => Maybe Value -> m EndOfBlock

-- | A pattern for <tt>llvm.sdiv</tt>.
pattern SDiv :: () => () => Location -> Type -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>llvm.sdiv</tt>.
sdiv :: () => MonadBlockBuilder m => Value -> Value -> m Value

-- | A pattern for <tt>llvm.sext</tt>.
pattern SExt :: () => () => Location -> Type -> operand -> AbstractOperation operand

-- | A builder for <tt>llvm.sext</tt>.
sext :: () => MonadBlockBuilder m => Type -> Value -> m Value

-- | A pattern for <tt>llvm.sitofp</tt>.
pattern SIToFP :: () => () => Location -> Type -> operand -> AbstractOperation operand

-- | A builder for <tt>llvm.sitofp</tt>.
sitofp :: () => MonadBlockBuilder m => Type -> Value -> m Value

-- | A pattern for <tt>llvm.srem</tt>.
pattern SRem :: () => () => Location -> Type -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>llvm.srem</tt>.
srem :: () => MonadBlockBuilder m => Value -> Value -> m Value

-- | A pattern for <tt>llvm.select</tt>.
pattern Select :: () => () => Location -> Type -> operand -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>llvm.select</tt>.
select :: () => MonadBlockBuilder m => Type -> Value -> Value -> Value -> m Value

-- | A pattern for <tt>llvm.shl</tt>.
pattern Shl :: () => () => Location -> Type -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>llvm.shl</tt>.
shl :: () => MonadBlockBuilder m => Value -> Value -> m Value

-- | A pattern for <tt>llvm.shufflevector</tt>.
pattern ShuffleVector :: () => () => Location -> Type -> operand -> operand -> [Int] -> AbstractOperation operand

-- | A builder for <tt>llvm.shufflevector</tt>.
shufflevector :: () => MonadBlockBuilder m => Type -> Value -> Value -> [Int] -> m Value

-- | A pattern for <tt>llvm.store</tt>.
pattern Store :: () => () => Location -> operand -> operand -> Maybe Int -> AbstractOperation operand

-- | A builder for <tt>llvm.store</tt>.
store :: () => MonadBlockBuilder m => Value -> Value -> Maybe Int -> m ()

-- | A pattern for <tt>llvm.sub</tt>.
pattern Sub :: () => () => Location -> Type -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>llvm.sub</tt>.
sub :: () => MonadBlockBuilder m => Value -> Value -> m Value

-- | A pattern for <tt>llvm.trunc</tt>.
pattern Trunc :: () => () => Location -> Type -> operand -> AbstractOperation operand

-- | A builder for <tt>llvm.trunc</tt>.
trunc :: () => MonadBlockBuilder m => Type -> Value -> m Value

-- | A pattern for <tt>llvm.udiv</tt>.
pattern UDiv :: () => () => Location -> Type -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>llvm.udiv</tt>.
udiv :: () => MonadBlockBuilder m => Value -> Value -> m Value

-- | A pattern for <tt>llvm.uitofp</tt>.
pattern UIToFP :: () => () => Location -> Type -> operand -> AbstractOperation operand

-- | A builder for <tt>llvm.uitofp</tt>.
uitofp :: () => MonadBlockBuilder m => Type -> Value -> m Value

-- | A pattern for <tt>llvm.urem</tt>.
pattern URem :: () => () => Location -> Type -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>llvm.urem</tt>.
urem :: () => MonadBlockBuilder m => Value -> Value -> m Value

-- | A pattern for <tt>llvm.mlir.undef</tt>.
pattern Undef :: () => () => Location -> Type -> AbstractOperation operand

-- | A builder for <tt>llvm.mlir.undef</tt>.
mlir_undef :: () => MonadBlockBuilder m => Type -> m Value

-- | A pattern for <tt>llvm.unreachable</tt>.
pattern Unreachable :: () => () => Location -> AbstractOperation operand

-- | A builder for <tt>llvm.unreachable</tt>.
unreachable :: () => MonadBlockBuilder m => m EndOfBlock

-- | A pattern for <tt>llvm.xor</tt>.
pattern XOr :: () => () => Location -> Type -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>llvm.xor</tt>.
xor :: () => MonadBlockBuilder m => Value -> Value -> m Value

-- | A pattern for <tt>llvm.zext</tt>.
pattern ZExt :: () => () => Location -> Type -> operand -> AbstractOperation operand

-- | A builder for <tt>llvm.zext</tt>.
zext :: () => MonadBlockBuilder m => Type -> Value -> m Value
instance GHC.Classes.Eq MLIR.AST.Dialect.LLVM.Type
instance MLIR.AST.Serialize.FromAST MLIR.AST.Dialect.LLVM.Type MLIR.Native.FFI.Type

module MLIR.AST.Dialect.Func

-- | A builder for <tt>func.call_indirect</tt>.
call_indirect :: () => MonadBlockBuilder m => [Type] -> Value -> [Value] -> m Value

-- | A pattern for <tt>func.return</tt>.
pattern Return :: () => () => Location -> [operand] -> AbstractOperation operand

-- | A builder for <tt>func.return</tt>.
return :: () => MonadBlockBuilder m => [Value] -> m EndOfBlock

module MLIR.AST.Dialect.Arith

-- | A pattern for <tt>arith.addf</tt>.
pattern AddF :: () => () => Location -> Type -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>arith.addf</tt>.
addf :: () => MonadBlockBuilder m => Value -> Value -> m Value

-- | A pattern for <tt>arith.addi</tt>.
pattern AddI :: () => () => Location -> Type -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>arith.addi</tt>.
addi :: () => MonadBlockBuilder m => Value -> Value -> m Value

-- | A pattern for <tt>arith.addui_carry</tt>.
pattern AddUICarry :: () => () => Location -> Type -> Type -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>arith.addui_carry</tt>.
addui_carry :: () => MonadBlockBuilder m => Type -> Type -> Value -> Value -> m [Value]

-- | A pattern for <tt>arith.andi</tt>.
pattern AndI :: () => () => Location -> Type -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>arith.andi</tt>.
andi :: () => MonadBlockBuilder m => Value -> Value -> m Value

-- | A pattern for <tt>arith.bitcast</tt>.
pattern Bitcast :: () => () => Location -> Type -> operand -> AbstractOperation operand

-- | A builder for <tt>arith.bitcast</tt>.
bitcast :: () => MonadBlockBuilder m => Type -> Value -> m Value

-- | A pattern for <tt>arith.ceildivsi</tt>.
pattern CeilDivSI :: () => () => Location -> Type -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>arith.ceildivsi</tt>.
ceildivsi :: () => MonadBlockBuilder m => Value -> Value -> m Value

-- | A pattern for <tt>arith.ceildivui</tt>.
pattern CeilDivUI :: () => () => Location -> Type -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>arith.ceildivui</tt>.
ceildivui :: () => MonadBlockBuilder m => Value -> Value -> m Value

-- | A pattern for <tt>arith.constant</tt>.
pattern Constant :: () => () => Location -> Type -> Attribute -> AbstractOperation operand

-- | A builder for <tt>arith.constant</tt>.
constant :: () => MonadBlockBuilder m => Type -> Attribute -> m Value

-- | A pattern for <tt>arith.divf</tt>.
pattern DivF :: () => () => Location -> Type -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>arith.divf</tt>.
divf :: () => MonadBlockBuilder m => Value -> Value -> m Value

-- | A pattern for <tt>arith.divsi</tt>.
pattern DivSI :: () => () => Location -> Type -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>arith.divsi</tt>.
divsi :: () => MonadBlockBuilder m => Value -> Value -> m Value

-- | A pattern for <tt>arith.divui</tt>.
pattern DivUI :: () => () => Location -> Type -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>arith.divui</tt>.
divui :: () => MonadBlockBuilder m => Value -> Value -> m Value

-- | A pattern for <tt>arith.extf</tt>.
pattern ExtF :: () => () => Location -> Type -> operand -> AbstractOperation operand

-- | A builder for <tt>arith.extf</tt>.
extf :: () => MonadBlockBuilder m => Type -> Value -> m Value

-- | A pattern for <tt>arith.extsi</tt>.
pattern ExtSI :: () => () => Location -> Type -> operand -> AbstractOperation operand

-- | A builder for <tt>arith.extsi</tt>.
extsi :: () => MonadBlockBuilder m => Type -> Value -> m Value

-- | A pattern for <tt>arith.extui</tt>.
pattern ExtUI :: () => () => Location -> Type -> operand -> AbstractOperation operand

-- | A builder for <tt>arith.extui</tt>.
extui :: () => MonadBlockBuilder m => Type -> Value -> m Value

-- | A pattern for <tt>arith.fptosi</tt>.
pattern FPToSI :: () => () => Location -> Type -> operand -> AbstractOperation operand

-- | A builder for <tt>arith.fptosi</tt>.
fptosi :: () => MonadBlockBuilder m => Type -> Value -> m Value

-- | A pattern for <tt>arith.fptoui</tt>.
pattern FPToUI :: () => () => Location -> Type -> operand -> AbstractOperation operand

-- | A builder for <tt>arith.fptoui</tt>.
fptoui :: () => MonadBlockBuilder m => Type -> Value -> m Value

-- | A pattern for <tt>arith.floordivsi</tt>.
pattern FloorDivSI :: () => () => Location -> Type -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>arith.floordivsi</tt>.
floordivsi :: () => MonadBlockBuilder m => Value -> Value -> m Value

-- | A pattern for <tt>arith.index_cast</tt>.
pattern IndexCast :: () => () => Location -> Type -> operand -> AbstractOperation operand

-- | A builder for <tt>arith.index_cast</tt>.
index_cast :: () => MonadBlockBuilder m => Type -> Value -> m Value

-- | A pattern for <tt>arith.index_castui</tt>.
pattern IndexCastUI :: () => () => Location -> Type -> operand -> AbstractOperation operand

-- | A builder for <tt>arith.index_castui</tt>.
index_castui :: () => MonadBlockBuilder m => Type -> Value -> m Value

-- | A pattern for <tt>arith.maxf</tt>.
pattern MaxF :: () => () => Location -> Type -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>arith.maxf</tt>.
maxf :: () => MonadBlockBuilder m => Value -> Value -> m Value

-- | A pattern for <tt>arith.maxsi</tt>.
pattern MaxSI :: () => () => Location -> Type -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>arith.maxsi</tt>.
maxsi :: () => MonadBlockBuilder m => Value -> Value -> m Value

-- | A pattern for <tt>arith.maxui</tt>.
pattern MaxUI :: () => () => Location -> Type -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>arith.maxui</tt>.
maxui :: () => MonadBlockBuilder m => Value -> Value -> m Value

-- | A pattern for <tt>arith.minf</tt>.
pattern MinF :: () => () => Location -> Type -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>arith.minf</tt>.
minf :: () => MonadBlockBuilder m => Value -> Value -> m Value

-- | A pattern for <tt>arith.minsi</tt>.
pattern MinSI :: () => () => Location -> Type -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>arith.minsi</tt>.
minsi :: () => MonadBlockBuilder m => Value -> Value -> m Value

-- | A pattern for <tt>arith.minui</tt>.
pattern MinUI :: () => () => Location -> Type -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>arith.minui</tt>.
minui :: () => MonadBlockBuilder m => Value -> Value -> m Value

-- | A pattern for <tt>arith.mulf</tt>.
pattern MulF :: () => () => Location -> Type -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>arith.mulf</tt>.
mulf :: () => MonadBlockBuilder m => Value -> Value -> m Value

-- | A pattern for <tt>arith.muli</tt>.
pattern MulI :: () => () => Location -> Type -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>arith.muli</tt>.
muli :: () => MonadBlockBuilder m => Value -> Value -> m Value

-- | A pattern for <tt>arith.negf</tt>.
pattern NegF :: () => () => Location -> Type -> operand -> AbstractOperation operand

-- | A builder for <tt>arith.negf</tt>.
negf :: () => MonadBlockBuilder m => Value -> m Value

-- | A pattern for <tt>arith.ori</tt>.
pattern OrI :: () => () => Location -> Type -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>arith.ori</tt>.
ori :: () => MonadBlockBuilder m => Value -> Value -> m Value

-- | A pattern for <tt>arith.remf</tt>.
pattern RemF :: () => () => Location -> Type -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>arith.remf</tt>.
remf :: () => MonadBlockBuilder m => Value -> Value -> m Value

-- | A pattern for <tt>arith.remsi</tt>.
pattern RemSI :: () => () => Location -> Type -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>arith.remsi</tt>.
remsi :: () => MonadBlockBuilder m => Value -> Value -> m Value

-- | A pattern for <tt>arith.remui</tt>.
pattern RemUI :: () => () => Location -> Type -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>arith.remui</tt>.
remui :: () => MonadBlockBuilder m => Value -> Value -> m Value

-- | A pattern for <tt>arith.sitofp</tt>.
pattern SIToFP :: () => () => Location -> Type -> operand -> AbstractOperation operand

-- | A builder for <tt>arith.sitofp</tt>.
sitofp :: () => MonadBlockBuilder m => Type -> Value -> m Value

-- | A pattern for <tt>arith.shli</tt>.
pattern ShLI :: () => () => Location -> Type -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>arith.shli</tt>.
shli :: () => MonadBlockBuilder m => Value -> Value -> m Value

-- | A pattern for <tt>arith.shrsi</tt>.
pattern ShRSI :: () => () => Location -> Type -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>arith.shrsi</tt>.
shrsi :: () => MonadBlockBuilder m => Value -> Value -> m Value

-- | A pattern for <tt>arith.shrui</tt>.
pattern ShRUI :: () => () => Location -> Type -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>arith.shrui</tt>.
shrui :: () => MonadBlockBuilder m => Value -> Value -> m Value

-- | A pattern for <tt>arith.subf</tt>.
pattern SubF :: () => () => Location -> Type -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>arith.subf</tt>.
subf :: () => MonadBlockBuilder m => Value -> Value -> m Value

-- | A pattern for <tt>arith.subi</tt>.
pattern SubI :: () => () => Location -> Type -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>arith.subi</tt>.
subi :: () => MonadBlockBuilder m => Value -> Value -> m Value

-- | A pattern for <tt>arith.truncf</tt>.
pattern TruncF :: () => () => Location -> Type -> operand -> AbstractOperation operand

-- | A builder for <tt>arith.truncf</tt>.
truncf :: () => MonadBlockBuilder m => Type -> Value -> m Value

-- | A pattern for <tt>arith.trunci</tt>.
pattern TruncI :: () => () => Location -> Type -> operand -> AbstractOperation operand

-- | A builder for <tt>arith.trunci</tt>.
trunci :: () => MonadBlockBuilder m => Type -> Value -> m Value

-- | A pattern for <tt>arith.uitofp</tt>.
pattern UIToFP :: () => () => Location -> Type -> operand -> AbstractOperation operand

-- | A builder for <tt>arith.uitofp</tt>.
uitofp :: () => MonadBlockBuilder m => Type -> Value -> m Value

-- | A pattern for <tt>arith.xori</tt>.
pattern XOrI :: () => () => Location -> Type -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>arith.xori</tt>.
xori :: () => MonadBlockBuilder m => Value -> Value -> m Value

-- | A builder for <tt>arith.select</tt>.
select :: () => MonadBlockBuilder m => Type -> Value -> Value -> Value -> m Value

module MLIR.AST.Dialect.ControlFlow
pattern Branch :: Location -> BlockName -> [Name] -> Operation
br :: MonadBlockBuilder m => BlockName -> [Value] -> m EndOfBlock
cond_br :: MonadBlockBuilder m => Value -> BlockName -> [Value] -> BlockName -> [Value] -> m EndOfBlock

-- | A pattern for <tt>cf.assert</tt>.
pattern Assert :: () => () => Location -> operand -> ByteString -> AbstractOperation operand

-- | A builder for <tt>cf.assert</tt>.
assert :: () => MonadBlockBuilder m => Value -> ByteString -> m ()

module MLIR.Native.Pass
createPassManager :: Context -> IO PassManager
inline_c_ffi_6989586621679427366 :: Context -> IO PassManager
destroyPassManager :: PassManager -> IO ()
inline_c_ffi_6989586621679427375 :: PassManager -> IO ()
withPassManager :: Context -> (PassManager -> IO a) -> IO a
runPasses :: PassManager -> Module -> IO LogicalResult
inline_c_ffi_6989586621679427388 :: PassManager -> Module -> IO LogicalResult
addConvertMemRefToLLVMPass :: PassManager -> IO ()
inline_c_ffi_6989586621679427397 :: PassManager -> IO ()
addConvertFuncToLLVMPass :: PassManager -> IO ()
inline_c_ffi_6989586621679427406 :: PassManager -> IO ()
addConvertVectorToLLVMPass :: PassManager -> IO ()
inline_c_ffi_6989586621679427415 :: PassManager -> IO ()
addConvertReconcileUnrealizedCastsPass :: PassManager -> IO ()
inline_c_ffi_6989586621679427424 :: PassManager -> IO ()
